<img class="card-img-top" src="
    <c:choose>
        <c:when test="eventItem.immagine != null">
            ${eventItem.immagine}
        </c:when>
        <c:otherwise>
            /WebCommunity/resources/eventDefault.jpg
        </c:otherwise>

    </c:choose>
" alt="Card image cap" width="100" height="100">



////////////////////////////////////////////////////////////////////////////////



<c:forEach items="${userinfo.categoriaList}" var="categoriesItem">
    <li style="display:inline;">
        ${categoriesItem.nome}
    </li>
</c:forEach>

////////////////////////////////////////////////////////////////////////////////

<li style="display:inline;">
    <div class="dropdown" style="float: left;">
        <button class="btn dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" style="padding-left: 25px; padding-right: 25px; margin: 5px;">
            ${categoriesItem.nome}
        </button>
        <div class="dropdown-menu interests-button-dropdown-menu">
            <button type="button" class="dropdown-item btn btn-circle" onlick="/WebCommunity/deleteInterest?id=${categoriesItem.id}" style="background-color: darkred;"><span class="glyphicon glyphicon-trash" aria-hidden="true" style="color: white;"></span></button>
        </div>
    </div>
</li>

////////////////////////////////////////////////////////////////////////////////

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pojo;

import java.io.Serializable;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

/**
 *
 * @author FSEVERI\parlato2889
 */
@Entity
@Table(name = "MEMBRI")
@NamedQueries({
    @NamedQuery(name = "Membro.findAll", query = "SELECT m FROM Membro m")})
public class Membro implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 30)
    @Column(name = "Username")
    private String username;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 256)
    @Column(name = "Password")
    private String password;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 30)
    @Column(name = "Nome")
    private String nome;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 30)
    @Column(name = "Cognome")
    private String cognome;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 50)
    @Column(name = "Mail")
    private String mail;
    @Size(max = 100)
    @Column(name = "Avatar")
    private String avatar;
    @JoinTable(name = "MEMBRO_CATEGORIA", joinColumns = {
        @JoinColumn(name = "Membro", referencedColumnName = "Username")}, inverseJoinColumns = {
        @JoinColumn(name = "Categoria", referencedColumnName = "Id")})
    @Fetch(FetchMode.SELECT)
    @ManyToMany(fetch = FetchType.EAGER)
    private List<Categoria> categoriaList;
    @Fetch(FetchMode.SELECT)
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "membro1", fetch = FetchType.EAGER)
    private List<Post> postList;

    public Membro() {
    }

    public Membro(String username) {
        this.username = username;
    }

    public Membro(String username, String password, String nome, String cognome, String mail) {
        this.username = username;
        this.password = password;
        this.nome = nome;
        this.cognome = cognome;
        this.mail = mail;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getCognome() {
        return cognome;
    }

    public void setCognome(String cognome) {
        this.cognome = cognome;
    }

    public String getMail() {
        return mail;
    }

    public void setMail(String mail) {
        this.mail = mail;
    }

    public String getAvatar() {
        return avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    public List<Categoria> getCategoriaList() {
        return categoriaList;
    }

    public void setCategoriaList(List<Categoria> categoriaList) {
        this.categoriaList = categoriaList;
    }

    public List<Post> getPostList() {
        return postList;
    }

    public void setPostList(List<Post> postList) {
        this.postList = postList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (username != null ? username.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Membro)) {
            return false;
        }
        Membro other = (Membro) object;
        if ((this.username == null && other.username != null) || (this.username != null && !this.username.equals(other.username))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString()
    {
        return "Membro{" + "username=" + username + ", password=" + password + ", nome=" + nome + ", cognome=" + cognome + ", mail=" + mail + ", avatar=" + avatar + ", categoriaList=" + categoriaList + ", postList=" + postList + '}';
    }
    
}

////////////////////////////////////////////////////////////////////////////////

public static Membro removePost(Integer eventID, String username)
    {
        Session session = HibernateUtil.getSessionFactory().openSession();
        Transaction transaction = null;
        
        Membro membro = null;
        
        try
        {
            transaction = session.beginTransaction();
            
            Post post = (Post) session.get(Post.class, new PostPK(username, eventID));
            
            List<Post> eventoPostList = post.getEvento1().getPostList();
            for(int i = 0; i < eventoPostList.size(); i++)
            {
                Post temp = eventoPostList.get(i);
                if(temp.getPostPK().getMembro().equals(username) && temp.getPostPK().getEvento() == eventID)
                {
                    eventoPostList.remove(i);
                }
            }
            post.getEvento1().setPostList(eventoPostList);
            
            List<Post> membroPostList = post.getMembro1().getPostList();
            for(int i = 0; i < membroPostList.size(); i++)
            {
                Post temp = membroPostList.get(i);
                if(temp.getPostPK().getMembro().equals(username) && temp.getPostPK().getEvento() == eventID)
                {
                    membroPostList.remove(i);
                }
            }
            post.getMembro1().setPostList(membroPostList);

            session.delete(post);
            session.save(post);

            transaction.commit();
        } catch (HibernateException e)
        {
            transaction.rollback();
            e.printStackTrace();
        } finally
        {
            membro = (Membro) session.get(Membro.class, username);
            session.close();
        }
        
        return membro;
    }

////////////////////////////////////////////////////////////////////////////////

navbar-fixed-top